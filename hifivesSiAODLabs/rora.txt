void leftLeftTurn(Vertex*& pointer) {
	Vertex* tempPointer = pointer->left;
	pointer->balance = 0;
	tempPointer->balance = 0;
	pointer->left = tempPointer->right;
	tempPointer->right = pointer;
	pointer = tempPointer;
}

void rightRightTurn(Vertex*& pointer) {
	Vertex* tempPointer = pointer->right;
	pointer->balance = 0;
	tempPointer->balance = 0;
	pointer->right = tempPointer->left;
	tempPointer->left = pointer;
	pointer = tempPointer;
}

void leftRightTurn(Vertex*& pointer) {
	Vertex* q = pointer->left;
	Vertex* r = q->right;

	pointer->balance = (r->balance < 0 ? 1 : 0);
	q->balance = (r->balance > 0 ? -1 : 0);

	r->balance = 0;
	q->right = r->left;
	pointer->left = r->right;
	r->left = q;
	r->right = pointer;
	pointer = r;
}

void rightLeftTurn(Vertex*& pointer) {
	Vertex* q = pointer->right;
	Vertex* r = q->left;

	pointer->balance = (r->balance > 0 ? -1 : 0);
	q->balance = (r->balance < 0 ? 1 : 0);

	r->balance = 0;
	pointer->right = r->left;
	q->left = r->right;
	r->left = pointer;
	r->right = q;
	pointer = r;
}

void AVLTreeAddNode(Vertex*& pointer, int data) {
	if (pointer == nullptr) {
		pointer = new Vertex;
		pointer->data = data;
		pointer->balance = 0;
		pointer->left = nullptr;
		pointer->right = nullptr;
		isIncreased = true;
	} else if (pointer->data > data) {
		AVLTreeAddNode(*&pointer->left, data);
		if (isIncreased) {
			if (pointer->balance > 0) {
				pointer->balance = 0;
				isIncreased = false;
			} else if (pointer->balance == 0) {
				pointer->balance = -1;
				isIncreased = true;
			} else {
				if (pointer->left->balance < 0) {
					cout << endl;
					leftLeftTurn(pointer);
					cout << "LL ";
					isIncreased = false;
				} else {
					cout << endl;
					leftRightTurn(pointer);
					cout << "LR ";
					isIncreased = false;
				}
			}
		}
	} else if (pointer->data < data) {
		AVLTreeAddNode(*&pointer->right, data);
		if (isIncreased) {
			if (pointer->balance < 0) {
				pointer->balance = 0;
				isIncreased = false;
			} else if (pointer->balance == 0) {
				pointer->balance = 1;
				isIncreased = true;
			} else {
				if (pointer->right->balance > 0) {
					cout << endl;
					rightRightTurn(pointer);
					cout << "RR ";
					isIncreased = false;
				}
				else {
					cout << endl;
					rightLeftTurn(pointer);
					cout << "RL ";
					isIncreased = false;
				}
			}
		}
	}
}